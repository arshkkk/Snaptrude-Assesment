{"version":3,"sources":["components/GoogleMap/GoogleMap.tsx","components/BabylonCuboid.tsx","App.tsx","index.tsx"],"names":["GoogleMap","setSrc","googleMapRef","createRef","useEffect","googleMapScript","document","createElement","src","window","body","appendChild","addEventListener","google","maps","Map","current","zoom","center","lat","lng","disabledDefaultUI","style","display","flexDirection","id","ref","width","height","onClick","element","getElementById","html2canvas","useCORS","then","canvas","toDataURL","saveMapToDataUrl","backgroundColor","color","padding","fontSize","engine","BabylonCuboid","img","Engine","newScene","scene","Scene","ArcRotateCamera","Math","PI","Vector3","Zero","attachControl","HemisphericLight","sphere","MeshBuilder","CreateBox","size","newMaterial","StandardMaterial","diffuseTexture","Texture","material","createScene","runRenderLoop","render","App","useState","ReactDOM","StrictMode"],"mappings":"gKAGaA,EAAY,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,OACpBC,EAAeC,sBAiCrB,OArBAC,qBAAU,WACR,IAAMC,EAAkBC,SAASC,cAAc,UAC/CF,EAAgBG,IACd,uGACFC,OAAOH,SAASI,KAAKC,YAAYN,GACjCA,EAAgBO,iBAAiB,QAAQ,WAfzC,IACIH,OAAOI,OAAOC,KAAKC,IAAIb,EAAac,QAAS,CAC/CC,KAAM,GACNC,OAAQ,CACNC,IAAK,UACLC,IAAK,WAEPC,mBAAmB,SAWpB,IAcD,sBAAKC,MAAO,CAAEC,QAAS,OAAQC,cAAe,UAA9C,UACE,qBACEC,GAAG,aAEHC,IAAKxB,EACLoB,MAAO,CAAEK,MAAO,QAASC,OAAQ,WAEnC,wBACEC,QAAS,kBApBf,WACE,IAAIC,EAAUxB,SAASyB,eAAe,cAGtCC,IAAYF,EAAS,CACnBG,SAAS,IACRC,MAAK,SAACC,GACPlC,EAAO,IACPA,EAAOkC,EAAOC,UAAU,eAYPC,IACff,MAAO,CACLgB,gBAAiB,QACjBC,MAAO,QACPC,QAAS,SACTC,SAAU,QANd,0B,OClCFC,EAAc,KACdP,EAAc,KACLQ,EAAgB,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,IAC9BxC,qBAAU,WACR+B,EAAS7B,SAASyB,eAAe,kBAEjCW,EAAS,IAAIG,SAAOV,GAAQ,KAC3B,IAsBH,GAAIA,GAAUO,EAAQ,CACpB,IAAMI,EAtBY,WAClB,IAAMC,EAAQ,IAAIC,QAAMN,GACT,IAAIO,kBACjB,UACCC,KAAKC,GAAK,EACXD,KAAKC,GAAK,IACV,EACAC,UAAQC,OACRN,GAEKO,cAAcnB,GAAQ,GACd,IAAIoB,mBAAiB,SAAU,IAAIH,UAAQ,EAAG,EAAG,GAAIL,GAApE,IACMS,EAASC,cAAYC,UAAU,SAAU,CAAEC,KAAM,GAAKZ,GACtDa,EAAc,IAAIC,mBAAiB,WAAYd,GAKrD,OAJAa,EAAYE,eAAiB,IAAIC,UAAQnB,EAAKG,GAE9CS,EAAOQ,SAAWJ,EAEXb,EAIUkB,GACjBvB,EAAOwB,eAAc,WACfpB,GAAUA,EAASqB,YAI3B,OACE,wBACE1C,GAAG,iBACHH,MAAO,CAAEK,MAAO,QAASC,OAAQ,YCpCxBwC,MAXf,WAAgB,IAAD,EACSC,mBAAiB,IAD1B,mBACN7D,EADM,KACDP,EADC,KAGb,OACE,sBAAKqB,MAAO,CAAEC,QAAS,QAAvB,UACE,cAAC,EAAD,CAAWtB,OAAQA,IACnB,cAAC,EAAD,CAAe2C,IAAKpC,QCL1B8D,IAASH,OACP,cAAC,IAAMI,WAAP,UACE,cAAC,EAAD,MAEFjE,SAASyB,eAAe,W","file":"static/js/main.173743cd.chunk.js","sourcesContent":["import React, { createRef, useEffect, useState } from 'react';\nimport html2canvas from 'html2canvas';\nimport { BabylonCuboid } from '../BabylonCuboid';\nexport const GoogleMap = ({ setSrc }: { setSrc: Function }) => {\n  const googleMapRef = createRef();\n  const createGoogleMap = () =>\n    //   @ts-ignore\n    new window.google.maps.Map(googleMapRef.current, {\n      zoom: 10,\n      center: {\n        lat: 30.210995,\n        lng: 74.945473,\n      },\n      disabledDefaultUI: true,\n    });\n\n  useEffect(() => {\n    const googleMapScript = document.createElement('script');\n    googleMapScript.src =\n      'https://maps.googleapis.com/maps/api/js?key=AIzaSyB3qI6gwg9nxZfOVtIUk_OgowDBqKJIMS8&libraries=places';\n    window.document.body.appendChild(googleMapScript);\n    googleMapScript.addEventListener('load', () => {\n      createGoogleMap();\n    });\n  }, []);\n\n  function saveMapToDataUrl() {\n    var element = document.getElementById('google-map');\n\n    //@ts-ignore\n    html2canvas(element, {\n      useCORS: true,\n    }).then((canvas) => {\n      setSrc('');\n      setSrc(canvas.toDataURL('img/png'));\n    });\n  }\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column' }}>\n      <div\n        id=\"google-map\"\n        //   @ts-ignore\n        ref={googleMapRef}\n        style={{ width: '700px', height: '500px' }}\n      ></div>\n      <button\n        onClick={() => saveMapToDataUrl()}\n        style={{\n          backgroundColor: 'green',\n          color: 'white',\n          padding: '10px 0',\n          fontSize: '18px',\n        }}\n      >\n        Generate\n      </button>\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport {\n  Engine,\n  ArcRotateCamera,\n  Scene,\n  Vector3,\n  HemisphericLight,\n  MeshBuilder,\n  StandardMaterial,\n  Texture,\n} from 'babylonjs';\nlet engine: any = null;\nlet canvas: any = null;\nexport const BabylonCuboid = ({ img }: { img: string }) => {\n  useEffect(() => {\n    canvas = document.getElementById('babylon-cuboid');\n    // @ts-ignore\n    engine = new Engine(canvas, true);\n  }, []);\n  const createScene = () => {\n    const scene = new Scene(engine);\n    const camera = new ArcRotateCamera(\n      'camera',\n      -Math.PI / 2,\n      Math.PI / 2.5,\n      3,\n      Vector3.Zero(),\n      scene,\n    );\n    camera.attachControl(canvas, true);\n    const light1 = new HemisphericLight('light1', new Vector3(1, 1, 0), scene);\n    const sphere = MeshBuilder.CreateBox('cuboid', { size: 1 }, scene);\n    const newMaterial = new StandardMaterial('texture1', scene);\n    newMaterial.diffuseTexture = new Texture(img, scene);\n\n    sphere.material = newMaterial;\n\n    return scene;\n  };\n\n  if (canvas && engine) {\n    const newScene = createScene();\n    engine.runRenderLoop(() => {\n      if (newScene) newScene.render();\n    });\n  }\n\n  return (\n    <canvas\n      id=\"babylon-cuboid\"\n      style={{ width: '700px', height: '500px' }}\n    ></canvas>\n  );\n};\n","import React, { useState } from 'react';\nimport { GoogleMap } from './components/GoogleMap/GoogleMap';\nimport { BabylonCuboid } from './components/BabylonCuboid';\nfunction App() {\n  const [src, setSrc] = useState<string>('');\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <GoogleMap setSrc={setSrc} />\n      <BabylonCuboid img={src} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}